<?php
/**
 * Responsable for all ajax admin requests
 *  
 * @since  1.0.0
 * @package MegustaDynamicForms
 * @subpackage MegustaDynamicForms/api
 * @author Santiago Carmo <santiagocca@gmail.com>
 * 
 */

require_once dirname(__FILE__) . '/../vendor/autoload.php';

use MDFModels\MDFActiveRecord;
use MDFModels\MDFFormModel;
use MDFModels\MDFFieldModel;


class MDFAdminController extends WP_REST_Controller {

   const NAMESPACE = MEGUSTA_DYNAMIC_FORMS_API_NAMESPACE . '/' . MEGUSTA_DYNAMIC_FORMS_API_NAMESPACE_VERSION;
   const ENDPOINT = 'forms';

   private $conn;
   private $fieldTypes;
   protected $schema;

   public function __construct() {
      global $wpdb;
      $this->conn = $wpdb;
      $this->fieldTypes = MDFFieldModel::getFieldTypes();

      //TODO: fix a warning generated by this line
      add_action('rest_api_init', [ $this, 'generateRounters' ]);
   }

   public function create($request) {
      $formModel = new MDFFormModel();
      $formModel->setParams($request->get_params());
      return  rest_ensure_response($formModel->save());
   }

   public function load($request) {
      $requestParams = $request->get_params();
      $formModel = new MDFFormModel();
      $data = $formModel->find($requestParams['id']);
      return  rest_ensure_response($data->toArray());
   }

   public function list($request) {
      $formModel = new MDFFormModel();
      $data = $formModel->findAll();
      return  rest_ensure_response($data);
   }

   public function update($request) {
      $requestParams = $request->get_params();

      $form = new MDFFormModel($requestParams['id']);
      $form->setParams($requestParams);

      return  rest_ensure_response($form->update());
      // return  rest_ensure_response($form->toArray());
   }

   public function delete($request) {
      $requestParams = $request->get_params();
      $formModel = new MDFFormModel();
      $data = $formModel->find($requestParams['id']);
      return  rest_ensure_response([ 'success' => $formModel->delete() ]);
   }


   public function generateRounters() {
      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
            'methods' => WP_REST_Server::CREATABLE, 
            'callback' => [$this, 'create']],
            'schema' => $this->responseSchema(),
            'args' => $this->createArgsScheme()
      ]);

      //maybe add some args to order and filter the response
      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
         'methods' => WP_REST_Server::READABLE, 
         'callback' => [$this, 'list']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT . '/(?P<id>[\d]+)', [[ 
         'methods' => WP_REST_Server::READABLE, 
         'callback' => [$this, 'load']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT . '/(?P<id>[\d]+)', [[ 
         'methods' => WP_REST_Server::EDITABLE, 
         'callback' => [$this, 'update']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT . '/(?P<id>[\d]+)', [[ 
         'methods' => WP_REST_Server::DELETABLE, 
         'callback' => [$this, 'delete']],
         'schema' => $this->responseSchema(),
      ]);
   }

   //schemas
   public function responseSchema() {
      if($this->schema) return $this->schema;
      $this->schema = MDFFormModel::getSchema();
      return $this->schema;
   }

   public function createArgsScheme() {
      return MDFFormModel::getArgs();
   }

 }
