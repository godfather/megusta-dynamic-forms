<?php
/**
 * Responsable for all ajax admin requests
 *  
 * @since  1.0.0
 * @package MegustaDynamicForms
 * @subpackage MegustaDynamicForms/api
 * @author Santiago Carmo <santiagocca@gmail.com>
 * 
 */

require_once dirname(__FILE__) . '/models/MDFFieldModel.php';

class MDFAdminController extends WP_REST_Controller {

   const NAMESPACE = MEGUSTA_DYNAMIC_FORMS_API_NAMESPACE . '/' . MEGUSTA_DYNAMIC_FORMS_API_NAMESPACE_VERSION;
   const ENDPOINT = 'forms';

   private $conn;
   private $fieldTypes;
   protected $schema;

   public function __construct() {
      global $wpdb;
      $this->conn = $wpdb;
      $this->fieldTypes = MDFFieldModel::getFieldTypes();

      //TODO: fix a warning generated by this line
      add_action('rest_api_init', [ $this, 'generateRounters' ]);
   }

   public function create($request) {
      $params = (object)$request->get_params();
      $field = new MDFFieldModel();
      $field->setParams($params->fields[0]);
      return rest_ensure_response($field->toArray());
   }

   public function load($request) {
      return  rest_ensure_response('load');
   }

   public function list($request) {
      return  rest_ensure_response('list');
   }

   public function update($request) {
      return  rest_ensure_response('update');
   }

   public function delete($request) {
      return  rest_ensure_response('delete');
   }


   public function generateRounters() {
      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
            'methods' => WP_REST_Server::CREATABLE, 
            'callback' => [$this, 'create']],
            'schema' => $this->responseSchema(),
            'args' => $this->createArgsScheme()
      ]);

      //maybe add some args to order and filter the response
      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
         'methods' => WP_REST_Server::READABLE, 
         'callback' => [$this, 'list']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT . '/(?P<id>[\d]+)', [[ 
         'methods' => WP_REST_Server::READABLE, 
         'callback' => [$this, 'load']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
         'methods' => WP_REST_Server::EDITABLE, 
         'callback' => [$this, 'update']],
         'schema' => $this->responseSchema(),
      ]);

      register_rest_route(self::NAMESPACE, self::ENDPOINT, [[ 
         'methods' => WP_REST_Server::DELETABLE, 
         'callback' => [$this, 'delete']],
         'schema' => $this->responseSchema(),
      ]);
   }

   //validations
   // private function validateFieldByType($field) {
   //    $valid = isset($field);

   //    if(isset($field['type'])) {
   //       // switch($field['type'])
   //    }
      
   //    return $valid;
   // }

   //schemas
   public function responseSchema() {
      if($this->schema) return $this->schema;

      $this->schema = [
         '$schema' => 'http://json-schema.org/draft-04/schema#',
         'title' => 'form',
         'type' => 'object',
         'properties' => [
            'id' => [
               'description' => 'asdsa',
               'type' => 'integer',
               'context' => ['view', 'edit'],
               'readonly' => true
            ],
            'name' => [
               'description' => 'form name',
               'type' => 'string',
               'context' => ['view', 'edit'],
               'readonly' => false
            ],
            'created_at' => [
               'description' => 'the form\'s creation date',
               'type' => 'string',
               'context' => ['view', 'edit'],
               'readonly' => true
            ],
            'updated_at' => [
               'description' => 'the latest date when the form was updated',
               'type' => 'string',
               'context' => ['view', 'edit'],
               'readonly' => true
            ],
            'fields' => [
               'description' => 'a list of fields used to mount the form',
               'type' => 'array',
               'context' => ['view', 'edit'],
               'items' => MDFFieldModel::getFieldScheme()
            ]
         ]
      ];
      
      return $this->schema;
   }

   public function createArgsScheme() {
      return [
         'name' => [
            'description' => __('The name that identifies the form.'),
            'type' => 'string',
            'required' => true,
            'format' => 'email'
            // 'validate_callback' => [ $this,  'validateCreateArgs'],
            // 'sanitize_callback' => [ $this,  'sanitizeCreateArgs'],
         ],
         'fields' => [
            'description' => __('A list of fields that forms the formulary'),
            'type' => 'array',
            'required' => true,
            'items' => MDFFieldModel::getFieldScheme(),
         ]        
      ];
   }

 }
